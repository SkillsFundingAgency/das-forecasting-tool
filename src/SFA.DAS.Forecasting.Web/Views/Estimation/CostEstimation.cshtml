@using SFA.DAS.Forecasting.Web.Extensions
@using SFA.DAS.Forecasting.Web.Mvc
@model SFA.DAS.Forecasting.Web.ViewModels.EstimationPageViewModel

@{
    ViewBag.Title = "Estimated Cost";
}

<div class="grid-row">
    <div class="column-two-thirds">

        @if (Model.Apprenticeships?.VirtualApprenticeships?.Count() > 0)
        {
            if (Model.CanFund)
            {
                <div class="success-summary">
                    <h3 class="heading-medium">Yes, you can fund these apprenticeships</h3>
                    <p>For more detail look at the remaining transfer allowance table.</p>
                </div>
            }
            else
            {
                <div class="error-summary" id="errorOne">
                    <h3 class="heading-medium">You can’t fund these apprenticeships</h3>
                    <p>You don't have enough transfer allowance.</p>
                    <p class="hidden">You don't have enough transfer allowance from December 2018 to support this transfer.</p>
                </div>
            }
        }


        @if (Model.ApprenticeshipRemoved)
        {
            <div class="success-summary">
                <h3 class="heading-medium">Apprenticeship Removed</h3>
            </div>
        }

    </div>
</div>

<div class="grid-row">
    <div class="column-two-thirds">
        <div class="hgroup form-group">
            <h1 class="heading-xlarge">Estimated costs</h1>
            <p class="lede">This page shows:</p>
            <ul class="list list-bullet">
                <li>cost of apprenticeships you've estimated</li>
                <li>your available account funds</li>
                <li>your available transfer allowance</li>
                
            </ul>

            <p>
                @{
                    var addApprenticeshipsCaption = "Add apprenticeships to your current estimate";
                    if (Model.Apprenticeships?.VirtualApprenticeships?.Count() > 0)
                    {
                        addApprenticeshipsCaption = "Add more apprenticeships to your current estimate";
                    }

                    <a class="button" href="@Url.RouteUrl("AddApprenticeships",new { hashedAccountId = Model.HashedAccountId,  estimationName = Model.EstimationName})">
                        @addApprenticeshipsCaption
                    </a>

                }

            </p>


        </div>

    </div>

</div>


@if (Model.Apprenticeships?.VirtualApprenticeships?.Count() > 0)
{

    <div class="grid-row">
        <div id="tabs-container">
            <ul class="tabs-menu">

                <li id="tab-apprenticeships-added"><a href="#apprenticeships-added">Apprenticeships added</a></li>
                <li id="tab-account-funds" class="current"><a href="#account-funds">Account funds</a></li>
                <li id="tab-remaining-transfer-allowance"><a href="#remaining-transfer-allowance">Remaining transfer allowance</a></li>
            </ul>
            
            <div id="account-funds" class="tab-content" style="">
                <div class="grid-row">
                    <div class="column-full">
                        <h2 class="heading-medium">This table shows your estimated costs against your account projection</h2>
                        <p><b>Opening balance: </b>@Model.AccountFunds.OpeningBalance.FormatCost()</p>
                        <p><b>Monthly Funds in: </b>@Model.AccountFunds.MonthlyInstallmentAmount.FormatCost()</p>
                    </div>
                </div>
                
                <div class="grid-row">
                    <div class="column-full" id="AccountFunds-Tables">
                        
                            @{
                                var newFinancialYearAccountFunds = true;
                                var startDateOfAccountFundsYear = Model.AccountFunds.Records.First().Date;
                            }

                            @foreach (var accountFund in Model.AccountFunds.Records)
                            {
                                if (newFinancialYearAccountFunds)
                                {
                                    newFinancialYearAccountFunds = false;
                                    var endYear = startDateOfAccountFundsYear.Month < 3 ? accountFund.Date.ToString("yyyy") : accountFund.Date.AddYears(1).ToString("yyyy");

                                    if(accountFund.Date > new DateTime(2019, 3, 1))
                                    {
                                        <h3 class="heading-medium">@accountFund.Date.ToGdsFormatWithoutDay() to March @endYear</h3>
                                        <div class="panel-warning2">
                                            <span class="icon"></span>
                                            <p>
                                                The estimate for the account balance projection does not yet show funds that are due to expire. You need to be aware that unused funds will expire after 24 months, which may affect the funds available to spend.
                                            </p>
                                        </div>
                                    }
                                    <h3 class="heading-medium">@accountFund.Date.ToGdsFormatWithoutDay() to March @endYear</h3>
                                    @:<table class="small">
                                    <thead>
                                    <tr>
                                        <th class="nowrap">Date</th>
                                        <th class="financial tippy" data-tippy-trigger="click" title="Cost of apprenticeships that have already started and currently being paid for. Apprenticeships that have not started or been paid for are not included in this colum">
                                            Your current costs
                                            <br />
                                            <span class="tip-info"><span class="info-title">info</span></span>
                                        </th>
                                        <th class="financial tippy" data-tippy-trigger="click" title="Cost of apprenticeships you’ve estimated using this tool" >Cost of estimated apprenticeships
                                            <br />
                                            <span class="tip-info"><span class="info-title">info</span></span>
                                        </th>
                                        <th class="financial tippy" data-tippy-trigger="click" title="The estimated funds you have left at the end of the month">
                                            Balance
                                            <br />
                                            <span class="tip-info"><span class="info-title">info</span></span>
                                        </th>
                                    </tr>
                                    </thead>
                                    @:<tbody>


                                }

                                <tr>
                                    <td class="nowrap">@accountFund.Date.ToGdsFormatShortMonthWithoutDay()</td>
                                    <td class="financial">@accountFund.ActualCost.FormatCost()</td>
                                    <td class="financial">@accountFund.EstimatedCost.FormatCost()</td>
                                    <td class="financial">@accountFund.Balance.FormatCost()</td>
                                </tr>

                                if (accountFund.Date.Month == 3 || Model.AccountFunds.Records.Last().Equals(accountFund))
                                {
                                    newFinancialYearAccountFunds = true;
                                    startDateOfAccountFundsYear = accountFund.Date;
                                    @:</tbody>
                                    @:</table>
                                }
                               
                            }
                            
                    </div>
                </div>

            </div>


            <div id="remaining-transfer-allowance" class="tab-content" style="display: none;">
                @if (Model.TransferAllowances != null)
                {
                    var tableBodyClass =Model.CanFund ? "" : "errorTable";
                    var newFinancialYear = true;
                    var startDateOfEstimationYear = Model.TransferAllowances.First().Date;

                    foreach (var costEstimate in Model.TransferAllowances)
                    {
                        var tableRowClass = costEstimate.IsLessThanCost ? "error-row" : "";
                        var tableCellClass = costEstimate.IsLessThanCost ? "error-messsage" : "";

                        if (newFinancialYear)
                        {
                            newFinancialYear = false;
                            var endYear = startDateOfEstimationYear.Month < 3 ? costEstimate.Date.ToString("yyyy") : costEstimate.Date.AddYears(1).ToString("yyyy");

                            <h3 class="heading-medium">@costEstimate.Date.ToGdsFormatWithoutDay() to March @endYear</h3>
                            @:<table class="small">
                                <thead>
                                    <tr>
                                        <th>Date</th>
                                        <th class="financial">Actual transfer costs</th>
                                        <th class="financial">Estimated costs</th>
                                        <th class="financial">Remaining transfer allowance</th>
                                    </tr>
                                </thead>
                                @:<tbody class="@tableBodyClass">


                                }

                                <tr class="@tableRowClass">
                                    <td >@costEstimate.Date.ToGdsFormatWithoutDay()</td>
                                    <td class="financial">@costEstimate.ActualCost.FormatCost()</td>
                                    <td class="financial">@costEstimate.EstimatedCost.FormatCost()</td>
                                    <td class="financial @tableCellClass">@costEstimate.RemainingAllowance.FormatCost()</td>
                                </tr>

                                if (costEstimate.Date.Month == 3 || Model.TransferAllowances.Last().Equals(costEstimate))
                                {
                                    newFinancialYear = true;
                                    startDateOfEstimationYear = costEstimate.Date;
                                @:</tbody>
                            @:</table>
                        }
                    }
                }
                <div class="grid-row">

                    <div class="column-full">

                        <details role="group">
                            <summary role="button" aria-controls="details-content-0" aria-expanded="false">What does this table show</summary>
                            <div class="panel panel-width-thin" id="details-content-0" aria-hidden="true">
                                <p class="text">
                                    The ‘remaining transfer allowance’ table shows a projection of your remaining transfer allowance and includes any actual training costs already committed for transfers. Your transfer allowance is re-calculated every tax year and will be available to use from May of each year.
                                </p>
                                <p class="text">
                                    The ‘Actual transfer costs’ column shows the cost of the apprenticeships that you’ve already agreed to fund with your transfer funds.
                                </p>
                            </div>
                        </details>

                    </div>
                </div>
            </div>

            <div id="apprenticeships-added" class="tab-content" style="display: none;">
                <table class="small responsive">
                    <thead>
                        <tr>
                            <th>Apprenticeship <span class="form-hint">Level</span></th>
                            <th>Number of apprentices</th>
                            <th>Start date</th>
                            <th>Total Cost </th>
                            <th>Number of monthly payments</th>
                            <th>Monthly payment</th>
                            <th>Completion payment</th>
                            <th></th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>

                        @foreach (var apprenticeship in Model.Apprenticeships.VirtualApprenticeships)
                        {
                        <tr>
                            <td data-label="Apprenticeship">@apprenticeship.CourseTitle <span class="form-hint"> @apprenticeship.Level</span></td>
                            <td data-label="Number of apprentices">@apprenticeship.ApprenticesCount</td>
                            <td data-label="Start Date">@apprenticeship.StartDate.ToGdsFormatWithoutDay() </td>
                            <td data-label="Total Cost">@apprenticeship.TotalCost.FormatCost() </td>
                            <td data-label="Number of monthly payments"> @apprenticeship.MonthlyPaymentCount</td>
                            <td data-label="Monthly payment">@apprenticeship.MonthlyPayment.FormatCost()</td>
                            <td data-label="Completion payment">@apprenticeship.CompletionPayment.FormatCost() </td>
                            <td>
                                @Html.RouteLink("Edit", "EditApprenticeships", new { hashedAccountId = Model.HashedAccountId, estimationName = Model.EstimationName, apprenticeshipsId = apprenticeship.Id })
                            </td>
                            <td>
                                @Html.RouteLink("Remove", "ConfirmRemoval", new { hashedAccountId = Model.HashedAccountId, estimationName = Model.EstimationName, id = apprenticeship.Id })
                            </td>
                        </tr>
                        }
                    </tbody>


                    <tfoot class="total">
                        <tr class="total">
                            <td data-label="Totals">&nbsp;</td>
                            <td data-label="Number of apprentices">
                                <span class="bold-xsmall"> @Model.Apprenticeships.TotalApprenticeshipCount </span>
                            </td>
                            <td>&nbsp;</td>
                            <td data-label="Total Cost">@Model.Apprenticeships.TotalCost.FormatCost()</td>
                            <td>&nbsp;</td>
                            <td data-label="Monthly payment">
                                <span class="bold-xsmall">@Model.Apprenticeships.TotalMonthlyPayment.FormatCost()</span>
                            </td>
                            <td data-label="Completion payment">
                                <span class="bold-xsmall">@Model.Apprenticeships.TotalCompletionPayment.FormatCost() </span>
                            </td>
                            <td></td>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    </div>

}
else
{
    <div class="grid-row">
        <div class="column-two-thirds">
            <div class="panel panel-width-thin">
                <p>You have not selected any apprenticeships for your estimation. You need to select at least one apprenticeship to make an estimation.</p>
            </div>
        </div>
    </div>
}


