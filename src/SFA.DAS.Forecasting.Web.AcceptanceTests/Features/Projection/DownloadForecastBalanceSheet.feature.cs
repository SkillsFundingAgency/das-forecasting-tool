// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SFA.DAS.Forecasting.Web.AcceptanceTests.Features.Projection
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("DownloadForecastBalanceSheet")]
    public partial class DownloadForecastBalanceSheetFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DownloadForecastBalanceSheet.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "DownloadForecastBalanceSheet", @"	As a Levy Employer logged into my Apprenticeship Account
	I want to be able to download my forecast details as a csv file
	So that I can use the forecast to explore a variety of possible future scenarios and better plan my future levy spend and apprenticeship", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
 testRunner.Given("that I am an employer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.And("I have logged into my Apprenticeship Account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("DownloadForecastBalanceSheetAC1_Forecast between payments made and 23rd of month")]
        public virtual void DownloadForecastBalanceSheetAC1_ForecastBetweenPaymentsMadeAnd23RdOfMonth()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DownloadForecastBalanceSheetAC1_Forecast between payments made and 23rd of month", null, ((string[])(null)));
#line 10
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Date",
                        "Funds in",
                        "Cost of training",
                        "Completion payments",
                        "Your contribution",
                        "Government contribution",
                        "Future funds"});
            table1.AddRow(new string[] {
                        "Jul 18",
                        "1000",
                        "2350",
                        "50000",
                        "1000",
                        "1339",
                        "12000"});
            table1.AddRow(new string[] {
                        "Aug 18",
                        "1000",
                        "850",
                        "45000",
                        "1000",
                        "1339",
                        "12000"});
            table1.AddRow(new string[] {
                        "Sep 18",
                        "1000",
                        "700",
                        "37880",
                        "1000",
                        "1339",
                        "12000"});
            table1.AddRow(new string[] {
                        "Nov 18",
                        "1000",
                        "1800",
                        "45000",
                        "1000",
                        "1339",
                        "12000"});
            table1.AddRow(new string[] {
                        "Dec 18",
                        "1000",
                        "1400",
                        "10000",
                        "1000",
                        "1339",
                        "12000"});
            table1.AddRow(new string[] {
                        "Jan 19",
                        "1000",
                        "2000",
                        "10000",
                        "1000",
                        "1339",
                        "12000"});
            table1.AddRow(new string[] {
                        "Feb 19",
                        "1000",
                        "1800",
                        "10000",
                        "1000",
                        "1339",
                        "12000"});
            table1.AddRow(new string[] {
                        "Mar 19",
                        "1000",
                        "1800",
                        "45000",
                        "1000",
                        "1339",
                        "12000"});
            table1.AddRow(new string[] {
                        "Apr 19",
                        "1000",
                        "2100",
                        "10000",
                        "1000",
                        "1339",
                        "12000"});
#line 11
     testRunner.Given("I have generated the following projections", ((string)(null)), table1, "Given ");
#line 23
  testRunner.Given("I\'m on the Funding projection page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 24
  testRunner.When("I select download as csv", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 25
  testRunner.Then("the csv should be downloaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 26
  testRunner.And("the downloaded filename is in the format esfaforecast_yyyymmddhhmmss", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
  testRunner.And("column headers are downloaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
     testRunner.And("all of the rows have been downloaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("DownloadForecastBalanceSheetAC2_Forecast data is displayed correctly when forecas" +
            "t between payments made and 23rd of month")]
        public virtual void DownloadForecastBalanceSheetAC2_ForecastDataIsDisplayedCorrectlyWhenForecastBetweenPaymentsMadeAnd23RdOfMonth()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DownloadForecastBalanceSheetAC2_Forecast data is displayed correctly when forecas" +
                    "t between payments made and 23rd of month", null, ((string[])(null)));
#line 32
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Date",
                        "Funds in",
                        "Cost Of Training",
                        "Completion Payments",
                        "Future Funds"});
            table2.AddRow(new string[] {
                        "Jul 18",
                        "1000",
                        "2350",
                        "50000",
                        "1000"});
            table2.AddRow(new string[] {
                        "Aug 18",
                        "1000",
                        "850",
                        "45000",
                        "1000"});
            table2.AddRow(new string[] {
                        "Sep 18",
                        "1000",
                        "700",
                        "37880",
                        "1000"});
            table2.AddRow(new string[] {
                        "Nov 18",
                        "1000",
                        "1800",
                        "45000",
                        "1000"});
            table2.AddRow(new string[] {
                        "Dec 18",
                        "1000",
                        "1400",
                        "10000",
                        "1000"});
            table2.AddRow(new string[] {
                        "Jan 19",
                        "1000",
                        "2000",
                        "10000",
                        "1000"});
            table2.AddRow(new string[] {
                        "Feb 19",
                        "1000",
                        "1800",
                        "10000",
                        "1000"});
            table2.AddRow(new string[] {
                        "Mar 19",
                        "1000",
                        "1800",
                        "45000",
                        "1000"});
            table2.AddRow(new string[] {
                        "Apr 19",
                        "1000",
                        "2100",
                        "10000",
                        "1000"});
#line 34
  testRunner.Given("I have generated the following projections", ((string)(null)), table2, "Given ");
#line 47
  testRunner.And("I\'m on the Funding projection page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 48
  testRunner.When("I select download as csv", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 49
  testRunner.Then("the csv should be downloaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 50
  testRunner.And("the downloaded filename is in the format esfaforecast_yyyymmddhhmmss", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
  testRunner.And("column headers are downloaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 52
  testRunner.And("all of the rows have been downloaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("DownloadForecastBalanceSheetAC3_Forecast data is displayed correctly when forecas" +
            "t between 23rd of month until next payments made")]
        public virtual void DownloadForecastBalanceSheetAC3_ForecastDataIsDisplayedCorrectlyWhenForecastBetween23RdOfMonthUntilNextPaymentsMade()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DownloadForecastBalanceSheetAC3_Forecast data is displayed correctly when forecas" +
                    "t between 23rd of month until next payments made", null, ((string[])(null)));
#line 54
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Date",
                        "Funds in",
                        "Cost Of Training",
                        "Completion Payments",
                        "Future Funds"});
            table3.AddRow(new string[] {
                        "Jul 18",
                        "1000",
                        "2350",
                        "50000",
                        "1000"});
            table3.AddRow(new string[] {
                        "Aug 18",
                        "1000",
                        "850",
                        "45000",
                        "1000"});
            table3.AddRow(new string[] {
                        "Sep 18",
                        "1000",
                        "700",
                        "37880",
                        "1000"});
            table3.AddRow(new string[] {
                        "Nov 18",
                        "1000",
                        "1800",
                        "45000",
                        "1000"});
            table3.AddRow(new string[] {
                        "Dec 18",
                        "1000",
                        "1400",
                        "10000",
                        "1000"});
            table3.AddRow(new string[] {
                        "Jan 19",
                        "1000",
                        "2000",
                        "10000",
                        "1000"});
            table3.AddRow(new string[] {
                        "Feb 19",
                        "1000",
                        "1800",
                        "10000",
                        "1000"});
            table3.AddRow(new string[] {
                        "Mar 19",
                        "1000",
                        "1800",
                        "45000",
                        "1000"});
            table3.AddRow(new string[] {
                        "Apr 19",
                        "1000",
                        "2100",
                        "10000",
                        "1000"});
#line 56
  testRunner.Given("I have generated the following projections", ((string)(null)), table3, "Given ");
#line 68
  testRunner.And("I\'m on the Funding projection page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
  testRunner.When("I select download as csv", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 70
  testRunner.Then("the csv should be downloaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 71
  testRunner.And("the downloaded filename is in the format esfaforecast_yyyymmddhhmmss", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 72
  testRunner.And("column headers are downloaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 73
  testRunner.And("all of the rows have been downloaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("DownloadForecastBalanceSheetAC4_Forecast data when negative balance")]
        public virtual void DownloadForecastBalanceSheetAC4_ForecastDataWhenNegativeBalance()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DownloadForecastBalanceSheetAC4_Forecast data when negative balance", null, ((string[])(null)));
#line 75
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Date",
                        "Funds in",
                        "Cost Of Training",
                        "Completion Payments",
                        "Future Funds"});
            table4.AddRow(new string[] {
                        "Jul 18",
                        "1000",
                        "2350",
                        "50000",
                        "1000"});
            table4.AddRow(new string[] {
                        "Aug 18",
                        "1000",
                        "850",
                        "45000",
                        "1000"});
            table4.AddRow(new string[] {
                        "Sep 18",
                        "1000",
                        "700",
                        "37880",
                        "1000"});
            table4.AddRow(new string[] {
                        "Nov 18",
                        "1000",
                        "1800",
                        "45000",
                        "1000"});
            table4.AddRow(new string[] {
                        "Dec 18",
                        "1000",
                        "1400",
                        "10000",
                        "1000"});
            table4.AddRow(new string[] {
                        "Jan 19",
                        "1000",
                        "2000",
                        "10000",
                        "1000"});
            table4.AddRow(new string[] {
                        "Feb 19",
                        "1000",
                        "1800",
                        "10000",
                        "1000"});
            table4.AddRow(new string[] {
                        "Mar 19",
                        "1000",
                        "1800",
                        "45000",
                        "1000"});
            table4.AddRow(new string[] {
                        "Apr 19",
                        "1000",
                        "2100",
                        "10000",
                        "1000"});
#line 77
  testRunner.Given("I have generated the following projections", ((string)(null)), table4, "Given ");
#line 89
  testRunner.And("I\'m on the Funding projection page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 90
  testRunner.When("I select download as csv", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 91
  testRunner.Then("the csv should be downloaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 92
  testRunner.And("the downloaded filename is in the format esfaforecast_yyyymmddhhmmss", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 93
  testRunner.And("column headers are downloaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 94
  testRunner.And("all of the rows have been downloaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
