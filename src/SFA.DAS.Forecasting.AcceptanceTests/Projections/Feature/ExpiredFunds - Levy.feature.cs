// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SFA.DAS.Forecasting.AcceptanceTests.Projections.Feature
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ExpiredFunds - [CI-893]")]
    public partial class ExpiredFunds_CI_893Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ExpiredFunds - Levy.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ExpiredFunds - [CI-893]", "\tIn order to avoid silly mistakes\r\n\tAs a math idiot\r\n\tI want to be told the sum o" +
                    "f two numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
testRunner.Given("I\'m a levy paying employer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payroll Year",
                        "Payroll Month"});
            table1.AddRow(new string[] {
                        "18-19",
                        "1"});
#line 8
testRunner.And("the payroll period is", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Apprentice Name",
                        "Course Name",
                        "Course Level",
                        "Provider Name",
                        "Start Date",
                        "Installment Amount",
                        "Completion Amount",
                        "Number Of Installments"});
            table2.AddRow(new string[] {
                        "Test Apprentice 1",
                        "Test Course",
                        "1",
                        "Test Provider",
                        "Yesterday",
                        "300",
                        "3000",
                        "24"});
#line 11
testRunner.And("the following commitments have been recorded", ((string)(null)), table2, "And ");
#line 14
testRunner.And("the current balance is 5000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
testRunner.And("I have no existing levy declarations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("no expired funds in any month")]
        public virtual void NoExpiredFundsInAnyMonth()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("no expired funds in any month", null, ((string[])(null)));
#line 18
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line 19
testRunner.When("the account projection is triggered after levy has been declared", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
testRunner.Then("the account projection should be generated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "MonthsFromNow",
                        "TotalCostOfTraining",
                        "TransferOutTotalCostOfTraining",
                        "TransferInTotalCostOfTraining",
                        "TransferInCompletionPayments",
                        "CompletionPayments",
                        "TransferOutCompletionPayments",
                        "FutureFunds",
                        "ExpiredFunds"});
            table3.AddRow(new string[] {
                        "0",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "5000",
                        "0"});
#line 21
testRunner.And("should have the following projected values", ((string)(null)), table3, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("expired funds in any month - Levy")]
        public virtual void ExpiredFundsInAnyMonth_Levy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("expired funds in any month - Levy", null, ((string[])(null)));
#line 25
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Scheme",
                        "Amount",
                        "Created Date",
                        "UseCreatedDateAsPayrollDate"});
            table4.AddRow(new string[] {
                        "abc-123",
                        "15,000",
                        "3 months ago",
                        "true"});
            table4.AddRow(new string[] {
                        "abc-123",
                        "15,000",
                        "2 months ago",
                        "true"});
            table4.AddRow(new string[] {
                        "abc-123",
                        "15,000",
                        "1 months ago",
                        "true"});
            table4.AddRow(new string[] {
                        "abc-123",
                        "15,000",
                        "Today",
                        "true"});
#line 26
testRunner.Given("the following levy declarations have been recorded", ((string)(null)), table4, "Given ");
#line 32
testRunner.And("At least one levy declaration which has expired", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
testRunner.When("the account projection is triggered after a levy run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 34
testRunner.Then("the account projection should be generated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "MonthsFromNow",
                        "TotalCostOfTraining",
                        "TransferOutTotalCostOfTraining",
                        "TransferInTotalCostOfTraining",
                        "TransferInCompletionPayments",
                        "CompletionPayments",
                        "TransferOutCompletionPayments",
                        "FutureFunds",
                        "ExpiredFunds"});
            table5.AddRow(new string[] {
                        "0",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "5000.00",
                        "0"});
            table5.AddRow(new string[] {
                        "1",
                        "300.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "19700.00",
                        "0"});
            table5.AddRow(new string[] {
                        "8",
                        "300.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "109700.00",
                        "12900.00"});
            table5.AddRow(new string[] {
                        "9",
                        "300.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "122600.00",
                        "14700.00"});
            table5.AddRow(new string[] {
                        "10",
                        "300.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "137300.00",
                        "14700.00"});
            table5.AddRow(new string[] {
                        "11",
                        "300.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "152000.00",
                        "14700.00"});
            table5.AddRow(new string[] {
                        "12",
                        "300.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "181400.00",
                        "0.00"});
#line 35
testRunner.And("should have the following projected values", ((string)(null)), table5, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("expired funds in any month - Before Payment")]
        public virtual void ExpiredFundsInAnyMonth_BeforePayment()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("expired funds in any month - Before Payment", null, ((string[])(null)));
#line 45
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Scheme",
                        "Amount",
                        "Created Date",
                        "UseCreatedDateAsPayrollDate"});
            table6.AddRow(new string[] {
                        "abc-123",
                        "15,000",
                        "3 months ago",
                        "true"});
            table6.AddRow(new string[] {
                        "abc-123",
                        "15,000",
                        "2 months ago",
                        "true"});
            table6.AddRow(new string[] {
                        "abc-123",
                        "15,000",
                        "1 months ago",
                        "true"});
            table6.AddRow(new string[] {
                        "abc-123",
                        "15,000",
                        "Today",
                        "true"});
#line 46
testRunner.Given("the following levy declarations have been recorded", ((string)(null)), table6, "Given ");
#line 52
testRunner.And("At least one levy declaration which has expired", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
testRunner.When("the account projection is triggered after levy has been declared", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 54
testRunner.Then("the account projection should be generated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "MonthsFromNow",
                        "TotalCostOfTraining",
                        "TransferOutTotalCostOfTraining",
                        "TransferInTotalCostOfTraining",
                        "TransferInCompletionPayments",
                        "CompletionPayments",
                        "TransferOutCompletionPayments",
                        "FutureFunds",
                        "ExpiredFunds"});
            table7.AddRow(new string[] {
                        "0",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "5000.00",
                        "0"});
            table7.AddRow(new string[] {
                        "1",
                        "300.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "19700.00",
                        "0"});
            table7.AddRow(new string[] {
                        "8",
                        "300.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "109700.00",
                        "12900.00"});
            table7.AddRow(new string[] {
                        "9",
                        "300.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "122600.00",
                        "14700.00"});
            table7.AddRow(new string[] {
                        "10",
                        "300.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "137300.00",
                        "14700.00"});
            table7.AddRow(new string[] {
                        "11",
                        "300.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "152000.00",
                        "14700.00"});
            table7.AddRow(new string[] {
                        "12",
                        "300.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "181400.00",
                        "0.00"});
#line 55
testRunner.And("should have the following projected values", ((string)(null)), table7, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("expired funds in any month - After Payment")]
        public virtual void ExpiredFundsInAnyMonth_AfterPayment()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("expired funds in any month - After Payment", null, ((string[])(null)));
#line 66
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Scheme",
                        "Amount",
                        "Created Date",
                        "UseCreatedDateAsPayrollDate"});
            table8.AddRow(new string[] {
                        "abc-123",
                        "15,000",
                        "3 months ago",
                        "true"});
            table8.AddRow(new string[] {
                        "abc-123",
                        "15,000",
                        "2 months ago",
                        "true"});
            table8.AddRow(new string[] {
                        "abc-123",
                        "15,000",
                        "1 months ago",
                        "true"});
            table8.AddRow(new string[] {
                        "abc-123",
                        "15,000",
                        "Today",
                        "true"});
#line 67
testRunner.Given("the following levy declarations have been recorded", ((string)(null)), table8, "Given ");
#line 73
testRunner.And("At least one levy declaration which has expired", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 74
testRunner.When("the account projection is triggered after a payment run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 75
testRunner.Then("the account projection should be generated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "MonthsFromNow",
                        "TotalCostOfTraining",
                        "TransferOutTotalCostOfTraining",
                        "TransferInTotalCostOfTraining",
                        "TransferInCompletionPayments",
                        "CompletionPayments",
                        "TransferOutCompletionPayments",
                        "FutureFunds",
                        "ExpiredFunds"});
            table9.AddRow(new string[] {
                        "0",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "20000.00",
                        "0"});
            table9.AddRow(new string[] {
                        "1",
                        "300.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "34700.00",
                        "0"});
            table9.AddRow(new string[] {
                        "8",
                        "300.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "124700.00",
                        "12900.00"});
            table9.AddRow(new string[] {
                        "9",
                        "300.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "137600.00",
                        "14700.00"});
            table9.AddRow(new string[] {
                        "10",
                        "300.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "152300.00",
                        "14700.00"});
            table9.AddRow(new string[] {
                        "11",
                        "300.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "167000.00",
                        "14700.00"});
            table9.AddRow(new string[] {
                        "12",
                        "300.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "196400.00",
                        "0.00"});
#line 76
testRunner.And("should have the following projected values", ((string)(null)), table9, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
