// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.0.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SFA.DAS.Forecasting.AcceptanceTests.Projections.Feature
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CoInvestmentFundedPayments")]
    public partial class CoInvestmentFundedPaymentsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CoInvestmentFundedPayments.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CoInvestmentFundedPayments", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Co-Invested payments")]
        public virtual void Co_InvestedPayments()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Co-Invested payments", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
 testRunner.Given("I am a sending employer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Apprentice Name",
                        "Course Name",
                        "Course Level",
                        "Provider Name",
                        "Start Date",
                        "Installment Amount",
                        "Completion Amount",
                        "Number Of Installments",
                        "FundingSource"});
            table1.AddRow(new string[] {
                        "Test Apprentice 1",
                        "Test Course 1",
                        "1",
                        "Test Provider 1",
                        "Yesterday",
                        "666.66",
                        "2000",
                        "12",
                        "Levy"});
            table1.AddRow(new string[] {
                        "Test Apprentice 2",
                        "Test Course 2",
                        "1",
                        "Test Provider 2",
                        "Yesterday",
                        "444.44",
                        "2000",
                        "12",
                        "CoInvestedEmployer"});
            table1.AddRow(new string[] {
                        "Test Apprentice 2",
                        "Test Course 2",
                        "1",
                        "Test Provider 2",
                        "Yesterday",
                        "444.44",
                        "2000",
                        "12",
                        "CoInvestedSfa"});
            table1.AddRow(new string[] {
                        "Test Apprentice 2",
                        "Test Course 2",
                        "1",
                        "Test Provider 2",
                        "Yesterday",
                        "444.44",
                        "2000",
                        "12",
                        "FullyFundedSfa"});
#line 5
 testRunner.And("the following commitments have been recorded", ((string)(null)), table1, "And ");
#line 11
 testRunner.When("the account projection is triggered after a payment run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 12
 testRunner.Then("the account projection should be generated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "MonthsFromNow",
                        "TotalCostOfTraining",
                        "TransferOutTotalCostOfTraining",
                        "TransferInTotalCostOfTraining",
                        "TransferInCompletionPayments",
                        "CompletionPayments",
                        "TransferOutCompletionPayments",
                        "FutureFunds"});
            table2.AddRow(new string[] {
                        "0",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "8000.00"});
            table2.AddRow(new string[] {
                        "1",
                        "666.66",
                        "444.44",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "9888.90"});
            table2.AddRow(new string[] {
                        "2",
                        "666.66",
                        "444.44",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "11777.80"});
            table2.AddRow(new string[] {
                        "3",
                        "666.66",
                        "444.44",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "13666.70"});
            table2.AddRow(new string[] {
                        "4",
                        "666.66",
                        "444.44",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "15555.60"});
            table2.AddRow(new string[] {
                        "5",
                        "666.66",
                        "444.44",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "17444.50"});
            table2.AddRow(new string[] {
                        "6",
                        "666.66",
                        "444.44",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "19333.40"});
            table2.AddRow(new string[] {
                        "7",
                        "666.66",
                        "444.44",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "21222.30"});
            table2.AddRow(new string[] {
                        "8",
                        "666.66",
                        "444.44",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "23111.20"});
            table2.AddRow(new string[] {
                        "9",
                        "666.66",
                        "444.44",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "25000.1"});
            table2.AddRow(new string[] {
                        "10",
                        "666.66",
                        "444.44",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "26889.00"});
            table2.AddRow(new string[] {
                        "11",
                        "666.66",
                        "444.44",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "28777.90"});
            table2.AddRow(new string[] {
                        "12",
                        "666.66",
                        "444.44",
                        "0.00",
                        "0.00",
                        "0.00",
                        "0.00",
                        "30666.80"});
            table2.AddRow(new string[] {
                        "13",
                        "0.00",
                        "444.44",
                        "0.00",
                        "0.00",
                        "2000.00",
                        "0.00",
                        "31222.36"});
#line 13
 testRunner.And("should have the following projected values", ((string)(null)), table2, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
