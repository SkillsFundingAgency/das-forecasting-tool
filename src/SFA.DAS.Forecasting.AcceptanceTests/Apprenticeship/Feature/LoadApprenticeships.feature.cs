// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SFA.DAS.Forecasting.AcceptanceTests.Apprenticeship.Feature
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("LoadApprenticeships")]
    public partial class LoadApprenticeshipsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "LoadApprenticeships.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "LoadApprenticeships", "\tAs an employer \r\n\tI want all my not started and not paid commitments to be consi" +
                    "dered in my projection\r\n\tSo that my projection is as complete as possible", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Load apprenticeships")]
        public virtual void LoadApprenticeships()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Load apprenticeships", null, ((string[])(null)));
#line 6
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
    testRunner.Given("I have no existing commitments", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "EmployerAccountId",
                        "TransferSenderId",
                        "Id",
                        "FirstName",
                        "StartDateString",
                        "EndDateString",
                        "Cost"});
            table1.AddRow(new string[] {
                        "12345",
                        "12346",
                        "1",
                        "Abba",
                        "in 1 years",
                        "in 2 years",
                        "1500"});
            table1.AddRow(new string[] {
                        "12345",
                        "",
                        "2",
                        "Abba",
                        "in 0 years",
                        "in 2 years",
                        "48000"});
#line 8
 testRunner.And("there is following apprenticehsips in the commitments API", ((string)(null)), table1, "And ");
#line 12
 testRunner.When("I trigger load of apprenticeships", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "ApprenticeshipId",
                        "ApprenticeName",
                        "CompletionAmount",
                        "InstallmentAmount",
                        "NumberOfInstallments",
                        "CourseLevel",
                        "FundingSource"});
            table2.AddRow(new string[] {
                        "1",
                        "Abba",
                        "300",
                        "100",
                        "12",
                        "6",
                        "Transfer"});
            table2.AddRow(new string[] {
                        "2",
                        "Abba",
                        "9600",
                        "1600",
                        "24",
                        "6",
                        "Levy"});
#line 13
 testRunner.Then("there should be following commitments stored", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
